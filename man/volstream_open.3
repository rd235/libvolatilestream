.\" Copyright (C) 2019 VirtualSquare. Project Leader: Renzo Davoli
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License,
.\" as published by the Free Software Foundation, either version 2
.\" of the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
.\" MA 02110-1301 USA.
.\"
.\" Automatically generated by Pandoc 3.0.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "VOLSTREAM_OPEN" "3" "December 2023" "VirtualSquare" "Library Functions Manual"
.hy
.SH NAME
.PP
\f[V]volstream_open\f[R] \[en] create a FILE* stream as a volatile
stream buffer
.SH SYNOPSIS
.PP
\f[V]#include <volatilestream.h>\f[R]
.PP
\f[V]FILE *volstream_open(void);\f[R]
.PP
\f[V]struct volstream;\f[R]
.PP
\f[V]int volstream_trunc(FILE *\f[R]\f[I]f\f[R]\f[V], size_t\f[R]
\f[I]length\f[R]\f[V]);\f[R]
.PP
\f[V]int volstream_getbuf(FILE *\f[R]\f[I]f\f[R]\f[V], void **\f[R]\f[I]buf\f[R]\f[V], size_t *\f[R]\f[I]buflen\f[R]\f[V]);\f[R]
.SH DESCRIPTION
.PP
A volatile stream is a stdio FILE* stream as a temporary dynamically
allocated (and deallocated) memory buffer.
.PP
The \f[V]volstream_open\f[R] function opens a stdio stream as a
temporary memory buffer.
The buffer is dynamically allocated, grows as needed and it is
automatically deallocated when the stream is closed.
.PP
\f[V]volstream_trunc\f[R] truncates the buffer to the requested
\f[I]length\f[R].
If the current size of the buffer is larger than \f[I]length\f[R] the
extra data is lost.
If the buffer is shorter it is extended and the extended part is filled
with null bytes.
.PP
\f[V]volstream_getbuf\f[R] writes the current address and size of the
buffer in \f[V]*buf\f[R] and \f[V]*buflen\f[R] respectively.
These values remain valid only as long as the caller performs no further
output on the stream or the stream is closed.
.SH RETURN VALUE
.PP
Upon successful completion \f[V]volstream_open\f[R] returns a FILE
pointer.
Otherwise, NULL is returned and errno is set to indicate the error.
.PP
\f[V]volstream_trunc\f[R] and \f[V]volstream_getbuf\f[R] return 0 or -1
if an error occurred.
In the event of an error, errno is set to indicate the error.
.SH EXAMPLES
.PP
The following example writes all the command arguments in a volatile
stream, then it rereads the volatile stream one byte at a time:
.IP
.nf
\f[C]
#include *stdio.h*
#include *volatilestream.h*

int main(int argc, char *argv[]) {
  FILE *f = volstream_open();
  int c;
  for (argv++; *argv; argv++)
    fprintf(f, \[dq]%s\[rs]n\[dq], *argv);
  fseek(f, 0, SEEK_SET);
  while ((c = getc(f)) != EOF)
    putchar(c);
  fclose(f);
}
\f[R]
.fi
.PP
The following example has the same effect but it rereads the arguments
as a memory buffer.
.IP
.nf
\f[C]
#include *stdio.h*
#include *unistd.h*
#include *volatilestream.h*

int main(int argc, char *argv[]) {
  FILE *f = volstream_open();
  int c;
  for (argv++; *argv; argv++) {
    fprintf(f, \[dq]%s\[rs]n\[dq], *argv);
  }
  fflush(f);
  ssize_t s;
  void *buf;
  volstream_getbuf(f, &buf, &s);
  write(STDOUT_FILENO, buf, s);
  fclose(f);
}
\f[R]
.fi
.SH AUTHOR
.PP
VirtualSquare.
Project leader: Renzo Davoli.
